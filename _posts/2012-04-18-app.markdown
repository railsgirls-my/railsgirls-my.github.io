---
layout: default
title: Rails Girls App Tutorial
permalink: app
---

# Rails Girls App Tutorial

*Created by Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

**Make sure you have a [Nitrous.IO](http://nitrous.io) account.** Follow our [quick setup guide](/nitrous) for Nitrous.IO to get started.


## Get to know the tools

<div class="indent" markdown="1">

<h3><i class="icon-browser">&nbsp;</i></h3>

<h3>Nitrous.IO</h3>
Nitrous.IO is a cloud development box and text editor where you can write and run your code.


<h3><i class="icon-browser">&nbsp;</i></h3>

<h3>Web browser</h3>
(Firefox, Safari, Chrome) for viewing your application.

</div>

## *1.*Creating the application

We're going to create a new Rails app called *railsgirls*. It is going to be a Photo Gallery.

First, log in to your Nitrous.IO box in your browser.

Next, type these commands in the *Console* tab of your Nitrous.IO Web IDE:

{% highlight sh %}
cd workspace
{% endhighlight %}

<p>You can verify you are now in an empty directory or folder by again running the <code>ls</code> command. Now you want to create a new app called <code>railsgirls</code> by running:</p>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

<p>This will create a new app in the folder <code>railsgirls</code>, so we again want to change the directory to be inside of our rails app by running:</p>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

<p>If you run <code>ls</code> inside of the directory you should see folders such as <code>app</code> and <code>config</code>. You can then start the rails server by running:</p>

{% highlight sh %}
rails server
{% endhighlight %}

Click *Preview* at the top of the Web IDE and select *Port 3000*. You should see a "Welcome aboard" page, which means that the generation of your new app worked correctly.

![Preview](/images/nitrous-preview.png)

Notice in this window the command prompt is not visible because you are now in the Rails server. The command prompt looks like this:
{% highlight sh %}
$
{% endhighlight %}

When the command prompt is not visible you cannot execute new commands. If you try running `cd` or another command it will not work. To return to the normal command prompt:

Hit `CTRL-C` in the terminal to quit the server.

**Coach:** Explain what each command does. What was generated? What does the server do?


## *2.*Create Photo scaffold

We're going to use Rails' scaffold functionality to generate a starting point that allows us to list, add, remove, edit, and view things; in our case photos.

**Coach:** What is Rails scaffolding? (Explain the command, the model name and related database table, naming conventions, attributes and types, etc.) What are migrations and why do you need them?

{% highlight sh %}
rails generate scaffold photo title:string description:text file:string
{% endhighlight %}

The scaffold creates new files in your project directory, but to get it to work properly we need to run a couple of other commands to update our database and restart the server.

{% highlight sh %}
bin/rake db:migrate
rails server
{% endhighlight %}

Click *Preview* at the top of the Web IDE and select *Port 3000* and append */photos* to the
 URL. Click around and test what you got by running these few command-line commands.

Hit `CTRL-C` to quit the server again when you've clicked around a little.


## *3.*Design Layout

**Coach:** Talk about the relationship between HTML and Rails. What part of views is HTML and what is Embedded Ruby (ERB)? What is MVC and how does this relate to it? (Models and controllers are responsible for generating the HTML views.)

The app doesn't look very nice yet. Let's do something about that. We'll use Twitter's Bootstrap 3 project to give us nicer styling really easily.

Navigate to `app/views/layouts/application.html.erb` in your Nitrous.IO page and above the line

{% highlight erb %}
<%= stylesheet_link_tag "application", media: "all", "data-turbolinks-track" => true %>
{% endhighlight %}

add

{% highlight erb %}
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/2.3.2/css/bootstrap.min.css">
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/2.3.2/css/bootstrap-theme.min.css">
{% endhighlight %}

and replace

{% highlight erb %}
<%= yield %>
{% endhighlight %}

with

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

Let's also add a navigation bar and footer to the layout. In the same file, under `<body>` add

{% highlight html %}
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">Photo Gallery</a>
    </div>
    <div class="collapse navbar-collapse">
      <ul class="nav navbar-nav">
        <li class="active"><a href="/photos">Photos</a></li>
      </ul>
    </div>
  </div>
</nav>
{% endhighlight %}

and before `</body>` add

{% highlight html %}
<footer>
  <div class="container">
    Rails Girls 2014
  </div>
</footer>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/2.3.2/js/bootstrap.min.js"></script>
{% endhighlight %}

Now let's also add some fillers to the page layout. Open `app/assets/stylesheets/application.css` and at the bottom add

{% highlight css %}
body { padding-top: 60px; }
footer { margin-top: 100px; }
{% endhighlight %}

Finally, delete the file `app/assets/stylesheets/scaffolds.css.scss` because we don’t really need the default style generated by Rails.

Now make sure you saved your files and refresh the browser to see what was changed. You can also change the HTML & CSS further.

In case your *Console* tab shows you an error message that *sort of* implies there is something wrong with your JavaScript or CoffeeScript, install [nodejs](http://nodejs.org/download/). This issue should not appear when you've used the RailsInstaller (but when you've installed Rails via ```gem install rails```).

**Coach:** Talk a little about CSS and layouts.

## Refine the navigation

Considering "photo" is the most important object in your app, we are going to put the "Add Photo" button on the navigation bar to make it always available.

Open `app/views/layouts/application.html.erb`, under the line

{% highlight html %}
<li class="active"><a href="/photos">Photos</a></li>
{% endhighlight %}

add
{% highlight erb %}
<li><%= link_to 'Add Photo', new_photo_path %></li>
{% endhighlight %}


## *4.*Adding picture uploads

We need to install a piece of software to let us upload files in Rails.

Open `Gemfile` in the project directory in your Nitrous.IO page and under the line

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

add

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**Coach:** Explain what libraries are and why they are useful. Describe what open source software is.

In the *Console* tab run:

{% highlight sh %}
bundle
{% endhighlight %}

Now we can generate the code for handling uploads. In the *Console* run:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

At this point you need to **restart the Rails server process** in the *Console*.

Hit `CTRL-C` in the *Console* tab to quit the server. Once it has stopped, you can press the up arrow to get to the last command entered, then hit enter to start the server again.

This is needed for the app to load the added library.

Open `app/models/photo.rb` and under the line

{% highlight ruby %}
class Photo < ActiveRecord::Base
{% endhighlight %}

add

{% highlight ruby %}
mount_uploader :file, PictureUploader
{% endhighlight %}

Open `app/views/photos/_form.html.erb` and change

{% highlight erb %}
<%= f.text_field :file%>
{% endhighlight %}

to

{% highlight erb %}
<%= f.file_field :file%>
{% endhighlight %}

Sometimes, you might get an *TypeError: can't cast ActionDispatch::Http::UploadedFile to string*.

If this happens, in file `app/views/photos/_form.html.erb` change the line

{% highlight erb %}
<%= form_for(@photo) do |f| %>
{% endhighlight %}

to

{% highlight erb %}
<%= form_for @photo, :html => {:multipart => true} do |f| %>
{% endhighlight %}

In your preview page, click on the *New Photo* link to add a new photo. When you upload an image it doesn't look nice because it only shows a path to the file, so let's fix that.

Open `app/views/photos/show.html.erb` and change

{% highlight erb %}
<%= @photo.file %>
{% endhighlight %}

to

{% highlight erb %}
<%= image_tag(@photo.file_url, :width => 600) if @photo.file.present? %>
{% endhighlight %}

Now refresh your browser to see what changed.

**Coach:** Talk a little about HTML.


## *5.*Design the photo upload form

Now that you have an upload form that works, let's make it look nice with the help of Bootstrap.

Open `app/views/photos/_form.html.erb`, where you see

{% highlight html %}
<div class="field">
{% endhighlight %}

change to
{% highlight html %}
<div class="form-group">
{% endhighlight %}


And add a `form-control` CSS class into each form input

{% highlight erb %}
<%= f.text_field :title, class:'form-control' %>
{% endhighlight %}

{% highlight erb %}
<%= f.text_area :description, class:'form-control' %>
{% endhighlight %}


To make the button look nice, add a `btn btn-default` CSS class to it

{% highlight erb %}
<%= f.submit class:'btn btn-default' %>
{% endhighlight %}


## *6.*Design the photo gallery

Now it’s time to make the photo gallery (photo list) look more professional. For that, we are going to replace the table layout with a div layout.

**Coach**: Talk a little about table vs div.

Open `app/views/photos/index.html.erb` in your text editor and replace all lines with

{% highlight erb %}
<h1>Listing photos</h1>

<% @photos.in_groups_of(3) do |group| %>
  <div class="row">
    <% group.compact.each do |photo| %>
      <div class="col-xs-4">
        <%= image_tag photo.file_url, :width => '100%' if photo.file.present?%>
        <h4><%= link_to photo.title, photo %></h4>
        <%= photo.description %>
      </div>
    <% end %>
  </div>
<% end %>
{% endhighlight %}

**Coach:** Explain what the new code means line by line, and talk a little about Bootstrap 12 grids layout.

Refresh it! We get a nice looking photo gallery. Click the "New Photo" button, and add more photos with real text - the page will look much better with content. There is a principle of contemporary web design: content is the best decoration.


## *7.*Design the photo details page

Click the title of a photo, and you will be brought to the details page of the photo. Now it is still scaffold generated by Rails, so let's make it better.

Open `app/views/photos/show.html.erb` in your text editor and replace all lines with

{% highlight erb %}
<p id="notice"><%= notice %></p>

<div class="row">
  <div class="col-xs-9">
    <%= image_tag(@photo.file_url, :width => "100%") if @photo.file.present? %>
  </div>

  <div class="col-xs-3">
    <p><b>Title: </b><%= @photo.title%></p>
    <p><b>Description: </b><%= @photo.description %></p>
    <p>
      <%= link_to 'Edit', edit_photo_path(@photo) %> |
      <%= link_to 'Destroy', @photo, confirm: 'Are you sure?', method: :delete %> |
      <%= link_to 'Back', photos_path %>
    </p>
  </div>
</div>
{% endhighlight %}


**Coach:** Explain what the new code means line by line.



## *8.*Finetune the routes

If you try to click *Preview* at the top of the Web IDE and select *Port 3000* it still shows the "Welcome aboard" page. Let's make it redirect to the photos page.

Open `config/routes.rb` and after the first line add

{% highlight ruby %}
root :to => redirect('/photos')
{% endhighlight %}

Test the change by refreshing the preview page in your browser.

**Coach:** Talk about routes, and include details on the order of routes and their relation to static files.

**Rails 3 users:** You will need to delete the index.html from the `/public/` folder for this to work.

## Create static page in your app

Lets add a static page to our app that will hold information about the author of this application — you!

{% highlight sh %}
rails generate controller pages info
{% endhighlight %}

This command will create you a new folder under `app/views` called `/pages` and under that a file called `info.html.erb` which will be your info page.

It also adds a new simple route to your routes.rb.

{% highlight ruby %}
get "pages/info"
{% endhighlight %}

Now you can open the file `app/views/pages/info.html.erb` and add information about you in HTML and then click *Preview* at the top of the Web IDE and select *Port 3000* and append */pages/info* to the URL to see your new info page.

To add a link to the info page, open the file `app/views/layouts/application.html.erb`, and insert

{% highlight erb %}
<p class="navbar-text navbar-right">
  <%= link_to 'About', pages_info_path, class:'navbar-link' %>
</p>
{% endhighlight %}

in between 

{% highlight html %}
  <a class="navbar-brand" href="/">Photo Gallery</a>
</div>
{% endhighlight %}

and

{% highlight html %}
<div class="collapse navbar-collapse">
  <ul class="nav navbar-nav">
{% endhighlight %}


## *7+.*What next?

* Add design using HTML &amp; CSS
* Add ratings
* Use CoffeeScript (or JavaScript) to add interaction
* Add picture resizing to make loading the pictures faster


## Additional Guides

* Guide 0: [Handy cheatsheet for Ruby, Rails, console etc.](https://github.com/PragTob/rails-beginner-cheatsheet)
* Guide 1: [Add commenting by Janika Liiv](/commenting)
* Guide 2: [Put your app online with Heroku by Terence Lee](/heroku) / [Put your app online with OpenShift by Katie Miller](/openshift) / [Put your app online with Ninefold](/ninefold) / [Put your app online with Shelly Cloud](/shellycloud) / [Put your app online with anynines](/anynines) / [Put your app online with Trucker.io](/trucker)
* Guide 3: [Create thumbnail images for the uploads by Miha Filej](/thumbnails)
* Guide 4: [Add design using HTML &amp; CSS by Alex Liao](/design)
* Guide 5: [Add Authentication (user accounts) with Devise by Piotr Steininger](/devise/)
* Guide 6: [Adding profile pictures with Gravatar](/gravatar)
* Guide 7: [Test your app with RSpec](/testing-rspec)
* Guide 8: [Continuous Deployment with Travis-CI](/continuous-travis) / [Continuous Deployment with Codeship](/continuous)
* Guide 9: [Go through additional explanations for the App by Lucy Bain](https://github.com/lbain/railsgirls)
